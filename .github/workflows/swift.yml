# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
    - name: Build
      run: swift build -v
    - name: Run tests
      run: swift test -v



struct Meal {
    let id: String
    let name: String
    let instructions: String
    let ingredients: [String]
    let measurements: [String]
}


import UIKit

class ViewController: UIViewController {
    private var meals: [Meal] = []

    override func viewDidLoad() {
        super.viewDidLoad()
        fetchMeals()
    }

    private func fetchMeals() {
        let url = URL(string: "https://www.themealdb.com/api/json/v1/1/filter.php?c=Dessert")!
        URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                print("Error fetching meals: \(error.localizedDescription)")
                return
            }

            if let data = data {
                do {
                    let decoder = JSONDecoder()
                    let response = try decoder.decode(MealsResponse.self, from: data)
                    if let meals = response.meals {
                        self.meals = meals.sorted(by: { $0.name < $1.name })
                        // Update UI on the main queue
                        DispatchQueue.main.async {
                            // Reload table view or update UI with meals
                        }
                    }
                } catch {
                    print("Error decoding JSON: \(error.localizedDescription)")
                }
            }
        }.resume()
    }

    private func fetchMealDetails(for mealId: String) {
        let url = URL(string: "https://www.themealdb.com/api/json/v1/1/lookup.php?i=\(mealId)")!
        URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                print("Error fetching meal details: \(error.localizedDescription)")
                return
            }

            if let data = data {
                do {
                    let decoder = JSONDecoder()
                    let response = try decoder.decode(MealsResponse.self, from: data)
                    if let meal = response.meals?.first {
                        // Display meal details in another view controller or UI
                    }
                } catch {
                    print("Error decoding JSON: \(error.localizedDescription)")
                }
            }
        }.resume()
    }
}

struct MealsResponse: Codable {
    let meals: [Meal]?
}






