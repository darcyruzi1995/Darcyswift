# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
    - name: Build
      run: swift build -v
    - name: Run tests
      run: swift test -v


struct Meal {
    let id: String
    let name: String
    let instructions: String
    let ingredients: [String]
    let measurements: [String]
}


class NetworkManager {
    static let shared = NetworkManager()

    func fetchMeals(completion: @escaping ([Meal]?, Error?) -> Void) {
        let url = URL(string: "https://www.themealdb.com/api/json/v1/1/filter.php?c=Dessert")!
        URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                completion(nil, error)
                return
            }

            if let data = data {
                do {
                    let decoder = JSONDecoder()
                    let response = try decoder.decode(MealsResponse.self, from: data)
                    completion(response.meals, nil)
                } catch {
                    completion(nil, error)
                }
            }
        }.resume()
    }

    func fetchMealDetails(byId id: String, completion: @escaping (Meal?, Error?) -> Void) {
        let url = URL(string: "https://www.themealdb.com/api/json/v1/1/lookup.php?i=\(id)")!
        URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                completion(nil, error)
                return
            }

            if let data = data {
                do {
                    let decoder = JSONDecoder()
                    let response = try decoder.decode(MealsResponse.self, from: data)
                    if let meal = response.meals?.first {
                        completion(meal, nil)
                    } else {
                        completion(nil, nil)
                    }
                } catch {
                    completion(nil, error)
                }
            }
        }.resume()
    }
}


import UIKit

class MealListViewController: UIViewController {
    // Implement your UI to display the list of meals and handle user selection
}

class MealDetailViewController: UIViewController {
    // Implement your UI to display the meal details
}



